;; NFT collection smart contract
#include "imports/stdlib.fc";
#include "imports/opcodes.fc";
#include "imports/errors.fc";
#include "imports/params.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON
int transfer_gas() asm "5000000 PUSHINT"; ;; 0.005 TON
int compute_fee() asm "5000000 PUSHINT"; ;; 0.005 TON

(slice, int, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return 
    (   ds~load_msg_addr(), ;; owner_address
        ds~load_uint(64), ;; next_item_index
        ds~load_ref(), ;; content
        ds~load_ref() ;; sbt_item_code
    );
}

() save_data(slice owner_address, int next_item_index, cell content, cell sbt_item_code) impure inline {
    set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(sbt_item_code)
    .end_cell());
}

cell calculate_item_state_init(int item_index, cell sbt_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(sbt_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_sbt_item(int item_index, cell sbt_item_code, cell sbt_content, slice owner_address, slice authority_address) impure {
    cell state_init = calculate_item_state_init(item_index, sbt_item_code);
    slice sbt_address = calculate_item_address(workchain(), state_init);

    cell body = begin_cell()
        .store_uint(op::init_sbt(), 32)
        .store_slice(owner_address)
        .store_slice(authority_address)
        .store_ref(sbt_content)
        .end_cell();

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sbt_address)
            .store_coins(min_tons_for_storage())
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(body);

    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_cashback(slice sender_address, int rest_amount) impure {
    cell body = begin_cell().end_cell();
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(rest_amount - transfer_gas())
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(body);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

(int) get_rest_amount(int amount) inline {
    int sbt_deploy_amount = min_tons_for_storage() + transfer_gas();
    int result  = amount - sbt_deploy_amount - compute_fee();
    return (result);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    cs~load_coins(); ;; skip fwd_fee
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, sbt_item_code) = load_data();
    
    ;; new_sbt#1 query_id:uint64 sbt_owner: MsgAddr ^[ onchain_prefix: int8 sbt_content: dict ] = ExtInMsgBody
    ;; new_owner#3 query_id:uint64 signature:bits512 amount: (VarUInteger 16) address: MsgAddr = ExtInMsgBody

    throw_unless(err::forbidden(), equal_slices(owner_address, sender_address));
    if (op == 1) { ;; deploy new sbt
        slice sbt_owner = in_msg_body~load_msg_addr();
        slice sbt_authority = in_msg_body~load_msg_addr();
        cell sbt_content = in_msg_body~load_ref();
        int rest_amount = get_rest_amount(msg_value);
        throw_if(err::not_enough_money(), rest_amount <= 0);

        deploy_sbt_item(next_item_index, sbt_item_code, sbt_content, sbt_owner, sbt_authority);
        send_cashback(sender_address, rest_amount);

        next_item_index += 1;
        save_data(owner_address, next_item_index, content, sbt_item_code);
        return ();
    }

    if (op == 3) { ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, sbt_item_code);
        return ();
    }
    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, sbt_item_code) = load_data();
    cell state_init = calculate_item_state_init(index, sbt_item_code);
    return calculate_item_address(workchain(), state_init);
}

cell get_nft_content(int index, cell individual_sbt_content) method_id {
    var (_, _, content, _) = load_data();
    slice cs = content.begin_parse();
    cell common_content = cs~load_ref();
    return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content.begin_parse())
                      .store_ref(individual_sbt_content)
          .end_cell());
}